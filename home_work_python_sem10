# Доработаем задания 5-6. Создайте класс-фабрику.
# Класс принимает тип животного (название одного из созданных классов) и параметры для этого типа.
# Внутри класса создайте экземпляр на основе переданного типа и верните его из класса-фабрики.


class Animal:
    def __init__(self, name, age):
        self.name = name
        self.age = age
        self.voice = None

    def get_voice(self):
        return self.voice


class Dog(Animal):
    def __init__(self, name, age, voice):
        super().__init__(name, age)
        self.voice = voice

class Cat(Animal):
    def __init__(self, name, age, voice):
        super().__init__(name, age)
        self.voice = voice

class Fabrik:
    def return_animal(self,type_animal,name, age, voice):
            if type_animal.capitalize() == "Dog":
                return Dog(name, age, voice)
            elif type_animal.capitalize() =="Cat":
                return Cat(name, age, voice)
            else:
                return "такой зверушки создать не можем"


factory = Fabrik()
bobik = factory.return_animal("dog","Bobik",14,"uuuuuuuuuuu")
print(f"{bobik.name}")
print(f"{bobik.age}")
print(f"{bobik.voice}")


# Возьмите 1-3 любые задания из прошлых семинаров (например сериализация данных),
# которые вы уже решали. Превратите функции в методы класса, а параметры в свойства. Задания должны решаться через вызов методов экземпляра.  

class return_tuple:
    def __init__(self,some_string):
        self.some_string = some_string
        
    def return_tuple_def(self):
        
        tuple_string = self.some_string.split("/")
        answer =[]
        answer.append(self.some_string)
        answer.append(tuple_string[-1].split(".")[0])
        answer.append(tuple_string[-1].split(".")[1])
        return tuple(answer)    
            

ret1 = return_tuple("/home/user/docs/Letter.txt")
print(ret1.return_tuple_def())


