# Создайте модуль и напишите в нём функцию, которая получает на вход дату в формате DD.MM.YYYY 
# Функция возвращает истину, если дата может существовать или ложь, если такая дата невозможна. 
# Для простоты договоримся, что год может быть в диапазоне [1, 9999].
# Весь период (1 января 1 года - 31 декабря 9999 года) действует Григорианский календарь. 
# Проверку года на високосность вынести в отдельную защищённую функцию


def real_date(split_string:list):
    month = {
        "01":"31",
        "02":"28",
        "03":"31",
        "04":"30",
        "05":"31",
        "06":"30",
        "07":"31",
        "08":"31",
        "09":"30",
        "10":"31",
        "11":"30",
        "12":"31"
    }
    try:
        if __leap_year == False:
            return int(split_string[0]) in range(1,int(month.get(split_string[1]))+1) and int(split_string[2]) in range(1,10000)
        else:
            if split_string[1] == "02":
                return int(split_string[0]) in range(1,int(month.get(split_string[1]))+1) and int(split_string[2]) in range(1,10000)
            else:
                return int(split_string[0]) in range(1,int(month.get(split_string[1]))+2) and int(split_string[2]) in range(1,10000)
    except:
        return "столько месяцев не бывает"
        
def __leap_year(split_string:list):
    return int(split_string[2]) % 4 == 0 or int(split_string[2]) % 400 == 0 
    

if __name__ == "__main__":
    some_string = str(input("введите дату в формате ДД.ММ.ГГГГ"))
    split_string = some_string.split(".") 
    
    print(f"дата существует?: {real_date(split_string)}")
    print(f"год високосный?: {__leap_year(split_string)}")


задача №3,4
# Известно, что на доске 8×8 можно расставить 8 ферзей так,
# чтобы они не били друг друга. Вам дана расстановка 8 ферзей на доске, определите, есть ли среди них пара бьющих друг друга. 
# Программа получает на вход восемь пар чисел, каждое число от 1 до 8 - координаты 8 ферзей. Если ферзи не бьют друг друга верните истину, а если бьют - ложь.

# Напишите функцию в шахматный модуль. Используйте генератор случайных чисел для случайной расстановки ферзей в задаче выше. 
# Проверяйте различный случайные варианты и выведите 4 успешных расстановки.

def chess_board(number_board,start_position):

    list_position_answer =[]
    start_position_in_row = start_position[1]
    if start_position_in_row % 2 == 0:
        list_position_answer.append(start_position_in_row)
        for _ in range(number_board-1):
            if start_position_in_row + 2 > number_board:
                start_position_in_row = 1
                list_position_answer.append(start_position_in_row)
            else:
                start_position_in_row +=2
                list_position_answer.append(start_position_in_row)
        return list(enumerate(list_position_answer,1))
   
    else:
        list_position_answer.append(start_position_in_row)
        for _ in range(number_board-1):
            if start_position_in_row + 2 > number_board:
                start_position_in_row = 2
                list_position_answer.append(start_position_in_row)
            else:
                start_position_in_row +=2
                list_position_answer.append(start_position_in_row)
        return list(enumerate(list_position_answer,1))  

def show_board(board):
    for row in board:
        a = [0]*len(board)
        a[row[1]-1] = 1
        print(*a)
            

number_board = int(input("введите размерность доски"))
start_position = [1,1]
board = chess_board(number_board,start_position)

print(show_board(board))
print(chess_board(number_board,start_position))




    
